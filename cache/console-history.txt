     console.error("Revert reason:", err.reason || err.message);
   } catch (err) {
     console.log("Static call unexpectedly succeeded");
     );
       { value: ethRequired }
       GAS_LIMIT,
       AMOUNT_TO_BRIDGE,
     await l2Bridge.callStatic.bridgeToken(
   try {
   // 5) Статический вызов, чтобы увидеть revert-reason
   const ethRequired = gasPriceL1.mul(GAS_LIMIT);
   const gasPriceL1 = await l1Provider.getGasPrice();
   const l1Provider = new ethers.providers.JsonRpcProvider(L1_RPC_URL);
   const L1_RPC_URL = process.env.L1_RPC_URL || "http://l1-devnet.scrollsdk";
   // 4) Подключаем L1-провайдер (только для расчёта fee)
   const GAS_LIMIT       = 1_000_000;
   const AMOUNT_TO_BRIDGE = ethers.utils.parseEther("99123");
   // 3) Параметры как в скрипте
   );
     addresses.l2.bridge
     "L2TokenBridge",
   const l2Bridge = await ethers.getContractAt(
   // 2) Берём инстанс моста
   const addresses = JSON.parse(fs.readFileSync("addresses.json", "utf8"));
   // 1) Загружаем адреса
   const { ethers } = require("hardhat");
   const fs = require("fs");
     console.error("Revert reason:", err.reason || err.message);
   } catch (err) {
     console.log("Static call unexpectedly succeeded");
     );
       { value: ethRequired }
       GAS_LIMIT,
       AMOUNT_TO_BRIDGE,
     await l2Bridge.callStatic.bridgeToken(
   try {
   // 5) Статический вызов, чтобы увидеть revert-reason
   const ethRequired = gasPriceL1.mul(GAS_LIMIT);
   const gasPriceL1 = await l1Provider.getGasPrice();
   const l1Provider = new ethers.providers.JsonRpcProvider(L1_RPC_URL);
   const L1_RPC_URL = process.env.L1_RPC_URL || "http://l1-devnet.scrollsdk";
   // 4) Подключаем L1-провайдер (только для расчёта fee)
   const GAS_LIMIT       = 1_000_000;
   const AMOUNT_TO_BRIDGE = ethers.utils.parseEther("99123");
   // 3) Параметры как в скрипте
   );
     addresses.l2.bridge
     "L2TokenBridge",
   const l2Bridge = await ethers.getContractAt(
   // 2) Берём инстанс моста
   const addresses = JSON.parse(fs.readFileSync("addresses.json", "utf8"));
   // 1) Загружаем адреса
   const { ethers } = require("hardhat");
   const fs = require("fs");
clear
   }clear
     console.error("Revert reason:", err.reason || err.message);
   } catch (err) {
     console.log("Static call unexpectedly succeeded");
     );
       { value: ethRequired }
       GAS_LIMIT,
       AMOUNT_TO_BRIDGE,
     await l2Bridge.callStatic.bridgeToken(
   try {
   // 5) Статический вызов, чтобы увидеть revert-reason
   const ethRequired = gasPriceL1.mul(GAS_LIMIT);
   const gasPriceL1 = await l1Provider.getGasPrice();
   const l1Provider = new ethers.providers.JsonRpcProvider(L1_RPC_URL);
   const L1_RPC_URL = process.env.L1_RPC_URL || "http://l1-devnet.scrollsdk";
   // 4) Подключаем L1-провайдер (только для расчёта fee)
   const GAS_LIMIT       = 1_000_000;
   const AMOUNT_TO_BRIDGE = ethers.utils.parseEther("99123");
   // 3) Параметры как в скрипте
   );
     addresses.l2.bridge
     "L2TokenBridge",
   const l2Bridge = await ethers.getContractAt(
   // 2) Берём инстанс моста
   const addresses = JSON.parse(fs.readFileSync("addresses.json", "utf8"));
   // 1) Загружаем адреса
   const { ethers } = require("hardhat");
   const fs = require("fs");
   const fs = require("fs");   const { ethers } = require("hardhat");   // 1) Загружаем адреса   const addresses = JSON.parse(fs.readFileSync("addresses.json", "utf8"));   // 2) Берём инстанс моста   const l2Bridge = await ethers.getContractAt(     "L2TokenBridge",     addresses.l2.bridge   );   // 3) Параметры как в скрипте   const AMOUNT_TO_BRIDGE = ethers.utils.parseEther("99123");   const GAS_LIMIT       = 1_000_000;   // 4) Подключаем L1-провайдер (только для расчёта fee)   const L1_RPC_URL = process.env.L1_RPC_URL || "http://l1-devnet.scrollsdk";   const l1Provider = new ethers.providers.JsonRpcProvider(L1_RPC_URL);   const gasPriceL1 = await l1Provider.getGasPrice();   const ethRequired = gasPriceL1.mul(GAS_LIMIT);   // 5) Статический вызов, чтобы увидеть revert-reason   try {     await l2Bridge.callStatic.bridgeToken(       AMOUNT_TO_BRIDGE,       GAS_LIMIT,       { value: ethRequired }     );     console.log("Static call unexpectedly succeeded");   } catch (err) {     console.error("Revert reason:", err.reason || err.message);   }
     console.error("Revert reason:", err.reason || err.message);
   } catch (err) {
     console.log("Static call succeeded (не должно было)"); 
     );
       { value: ethRequired }
       GAS_LIMIT,
       AMOUNT_TO_BRIDGE,
     await l2Bridge.callStatic.bridgeToken(
   try {
   // Статический вызов
   const ethRequired = gasPriceL1.mul(GAS_LIMIT);
   const gasPriceL1 = await l1Provider.getGasPrice();
   // Считаем fee точно так же
   const l1Provider      = new ethers.providers.JsonRpcProvider(L1_RPC_URL);
   const L1_RPC_URL      = process.env.L1_RPC_URL || "http://l1-devnet.scrollsdk";
   const GAS_LIMIT       = 1_000_000;
   const AMOUNT_TO_BRIDGE = ethers.utils.parseEther("99123");
   // Параметры как в вашем скрипте
   const l2Bridge = await ethers.getContractAt("L2TokenBridge", addresses.l2.bridge);
   const addresses = JSON.parse(fs.readFileSync("addresses.json","utf8"));
   // Адреса из deploy
   const { ethers } = require("hardhat");
   const fs = require("fs");   const { ethers } = require("hardhat");   // Адреса из deploy   const addresses = JSON.parse(fs.readFileSync("addresses.json","utf8"));   const l2Bridge = await ethers.getContractAt("L2TokenBridge", addresses.l2.bridge);   // Параметры как в вашем скрипте   const AMOUNT_TO_BRIDGE = ethers.utils.parseEther("99123");   const GAS_LIMIT       = 1_000_000;   const L1_RPC_URL      = process.env.L1_RPC_URL || "http://l1-devnet.scrollsdk";   const l1Provider      = new ethers.providers.JsonRpcProvider(L1_RPC_URL);   // Считаем fee точно так же   const gasPriceL1 = await l1Provider.getGasPrice();   const ethRequired = gasPriceL1.mul(GAS_LIMIT);   // Статический вызов   try {     await l2Bridge.callStatic.bridgeToken(       AMOUNT_TO_BRIDGE,       GAS_LIMIT,       { value: ethRequired }     );     console.log("Static call succeeded (не должно было)");    } catch (err) {     console.error("Revert reason:", err.reason || err.message);   }   const fs = require("fs");
   }
     console.error("Revert reason:", err.reason || err.message);
   } catch (err) {
     console.log("Static call succeeded (не должно было)"); 
     );
       { value: ethRequired }
       GAS_LIMIT,
       AMOUNT_TO_BRIDGE,
     await l2Bridge.callStatic.bridgeToken(
   try {
   // Статический вызов
   const ethRequired = gasPriceL1.mul(GAS_LIMIT);
   const gasPriceL1 = await l1Provider.getGasPrice();
   // Считаем fee точно так же
   const l1Provider      = new ethers.providers.JsonRpcProvider(L1_RPC_URL);
   const L1_RPC_URL      = process.env.L1_RPC_URL || "http://l1-devnet.scrollsdk";
   const GAS_LIMIT       = 1_000_000;
   const AMOUNT_TO_BRIDGE = ethers.utils.parseEther("99123");
   // Параметры как в вашем скрипте
   const l2Bridge = await ethers.getContractAt("L2TokenBridge", addresses.l2.bridge);
   const addresses = JSON.parse(fs.readFileSync("addresses.json","utf8"));
   // Адреса из deploy
   const { ethers } = require("hardhat");
   const fs = require("fs");
cd /home/scroll/bridge && npx hardhat run --network l2_scrollsdk scripts/testL2Bridge.js
q